"""
Base Visualizer Class for VN30 TFT Features

This module provides a base class for creating feature visualizers with
common functionality for HTML output and sample data generation.

Author: StocketAI
Created: 2025
"""

import pandas as pd
import matplotlib.pyplot as plt
import base64
from io import BytesIO
import logging
from pathlib import Path
from typing import Optional, Dict, Any
from abc import ABC, abstractmethod

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class BaseVisualizer(ABC):
    """
    Base class for all feature visualizers.

    Provides common functionality for:
    - HTML generation with embedded plots
    - Sample data generation
    - File output management
    """

    def __init__(self):
        """Initialize base visualizer."""
        self.feature_names: list = []
        self.title: str = "Feature Analysis"

    @abstractmethod
    def generate_explanation(self) -> str:
        """Generate explanation for the feature."""
        pass

    @abstractmethod
    def generate_visualization(self, data: pd.DataFrame, output_path: str, **kwargs) -> str:
        """Generate visualization for the feature."""
        pass

    def save_plot_as_html(self, fig: plt.Figure, output_path: str, filename: str) -> str:
        """
        Save matplotlib figure as HTML file with embedded image.

        Args:
            fig: Matplotlib figure to save
            output_path: Directory path to save the file
            filename: Name of the HTML file

        Returns:
            Path to the generated HTML file
        """
        try:
            # Create output directory if it doesn't exist
            Path(output_path).mkdir(parents=True, exist_ok=True)

            # Save plot to BytesIO buffer
            buf = BytesIO()
            fig.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)

            # Encode to base64
            img_base64 = base64.b64encode(buf.read()).decode('utf-8')
            buf.close()

            # Create HTML content
            html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{self.title}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .plot-container {{
            text-align: center;
            margin: 20px 0;
        }}
        .plot-container img {{
            max-width: 100%;
            height: auto;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .explanation {{
            margin-top: 30px;
            border-top: 2px solid #eee;
            padding-top: 20px;
        }}
        .feature-info {{
            background-color: #f8f9fa;
            padding: 15px;
            border-left: 4px solid #007bff;
            margin: 10px 0;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
        }}
        .timestamp {{
            color: #666;
            font-size: 0.9em;
            text-align: right;
            margin-top: 20px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>{self.title}</h1>

        <div class="feature-info">
            <strong>Features:</strong> {', '.join(self.feature_names)}<br>
            <strong>Generated:</strong> {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}
        </div>

        <div class="plot-container">
            <img src="data:image/png;base64,{img_base64}" alt="{self.title}">
        </div>

        <div class="explanation">
            {self.generate_explanation()}
        </div>

        <div class="timestamp">
            Generated by StocketAI Visualizer Engine
        </div>
    </div>
</body>
</html>
"""

            # Save HTML file
            html_path = Path(output_path) / filename
            with open(html_path, 'w', encoding='utf-8') as f:
                f.write(html_content)

            logger.info(f"Saved HTML visualization: {html_path}")
            return str(html_path)

        except Exception as e:
            logger.error(f"Error saving plot as HTML: {e}")
            return None



    def validate_data(self, data: pd.DataFrame) -> bool:
        """
        Validate input data for visualization.

        Args:
            data: DataFrame to validate

        Returns:
            True if data is valid, False otherwise
        """
        if data is None or data.empty:
            logger.error("Data is None or empty")
            return False

        # Check for required columns
        required_cols = ['time'] if 'time' in data.columns else ['close']
        missing_cols = [col for col in required_cols if col not in data.columns]

        if missing_cols:
            logger.error(f"Missing required columns: {missing_cols}")
            return False

        # Check for minimum data points
        if len(data) < 10:
            logger.error(f"Insufficient data points: {len(data)} (minimum 10 required)")
            return False

        return True
